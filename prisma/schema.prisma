// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(uuid())
  name                   String?
  email                  String?        @unique
  password               String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  image                  String?        @default("")
  posts                  Post[]         @relation("postAuthor")
  profile                Profile?
  likes                  Post[]         @relation("likes")
  commentLikes           Comment[]      @relation("likes")
  comments               Comment[]      @relation("commentAuthor")
  profileId              String?
  friendRequestsReceived User[]         @relation("friendRequests")
  friendRequestsSent     User[]         @relation("friendRequests")
  friends                User[]         @relation("userFriends")
  friendsOfUser          User[]         @relation("userFriends")
  followers              User[]         @relation("follow")
  following              User[]         @relation("follow")
  receivedNotifications  Notification[]
  createdNotifications   Notification[] @relation("notificationCreator")
  likedPosts             Post[]         @relation("UserLikedPosts")
  likedComments          Comment[]      @relation("UserLikedComments")
}

model Post {
  id           String         @id @default(uuid())
  content      String?
  author       User?          @relation("postAuthor", fields: [authorId], references: [id])
  authorId     String?
  likes        User[]         @relation("likes")
  comments     Comment[]      @relation("postComments")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
  likedBy      User[]         @relation("UserLikedPosts")
}

model Comment {
  id           String         @id @default(cuid())
  content      String?
  author       User?          @relation("commentAuthor", fields: [authorId], references: [id])
  authorId     String?
  post         Post?          @relation("postComments", fields: [postId], references: [id])
  postId       String?
  likes        User[]         @relation("likes")
  replies      Comment[]      @relation("commentReplies")
  parent       Comment?       @relation("commentReplies", fields: [parentId], references: [id])
  parentId     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
  likedBy      User[]         @relation("UserLikedComments")
}

model Profile {
  id        String   @id @default(cuid())
  bio       String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String // User who receives the notification
  user      User     @relation(fields: [userId], references: [id])
  type      String // "COMMENT", "LIKE", "REPLY", etc.
  seen      Boolean  @default(false)
  postId    String? // Optional reference to a post
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String? // Optional reference to a comment
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdBy String? // ID of user who triggered the notification
  creator   User?    @relation("notificationCreator", fields: [createdBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
